{"version":3,"sources":["pages/Home/components/projects-maps.component.js","pages/Home/components/filter.component.js","pages/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["memo","setTooltipContent","data-tip","projectionConfig","scale","geography","geographies","map","geo","key","rsmKey","onMouseEnter","properties","NAME","POP_EST","onMouseLeave","style","default","fill","outline","hover","pressed","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","ProjectsList","useState","content","setContent","projects","setProjects","service","setService","useEffect","axios","get","then","response","data","catch","error","getServices","Dropdown","Toggle","variant","id","Menu","servicesName","_","uniq","p","services","getServicesTo","value","index","Item","onClick","project","country","filter","getCountryData","display","flexDirection","overflowY","marginBottom","color","company","description","App","path","exact","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2be6bb4c.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport {\r\n    ZoomableGroup,\r\n    ComposableMap,\r\n    Geographies,\r\n    Geography\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst rounded = num => {\r\n    if (num > 1000000000) {\r\n        return Math.round(num / 100000000) / 10 + \"Bn\";\r\n    } else if (num > 1000000) {\r\n        return Math.round(num / 100000) / 10 + \"M\";\r\n    } else {\r\n        return Math.round(num / 100) / 10 + \"K\";\r\n    }\r\n};\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n    return (\r\n        <>\r\n            <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n                <ZoomableGroup>\r\n                    <Geographies geography={geoUrl}>\r\n                        {({ geographies }) =>\r\n                            geographies.map(geo => (\r\n                                <Geography\r\n                                    key={geo.rsmKey}\r\n                                    geography={geo}\r\n                                    onMouseEnter={() => {\r\n                                        const { NAME, POP_EST } = geo.properties;\r\n                                        setTooltipContent(NAME);\r\n                                    }}\r\n                                    onMouseLeave={() => {\r\n                                        setTooltipContent(\"\");\r\n                                    }}\r\n                                    style={{\r\n                                        default: {\r\n                                            fill: \"#D6D6DA\",\r\n                                            outline: \"none\"\r\n                                        },\r\n                                        hover: {\r\n                                            fill: \"#F53\",\r\n                                            outline: \"none\"\r\n                                        },\r\n                                        pressed: {\r\n                                            fill: \"#E42\",\r\n                                            outline: \"none\"\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </Geographies>\r\n                </ZoomableGroup>\r\n            </ComposableMap>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport InboxIcon from '@material-ui/icons/Inbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nexport default function SelectedListItem() {\r\n    const classes = useStyles();\r\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n    const handleListItemClick = (event, index) => {\r\n        setSelectedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root} style={{display:'flex',flexDirection:'column',overflowY:'auto'}}>\r\n            <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                <ListItem\r\n                    button\r\n                    selected={selectedIndex === 0}\r\n                    onClick={(event) => handleListItemClick(event, 0)}\r\n                >\r\n                    <ListItemIcon>\r\n                        <InboxIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Inbox\" />\r\n                </ListItem>\r\n                <ListItem\r\n                    button\r\n                    selected={selectedIndex === 1}\r\n                    onClick={(event) => handleListItemClick(event, 1)}\r\n                >\r\n                    <ListItemIcon>\r\n                        <DraftsIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Drafts\" />\r\n                </ListItem>\r\n            </List>\r\n            <Divider />\r\n            <List component=\"nav\" aria-label=\"secondary mailbox folder\">\r\n                <ListItem\r\n                    button\r\n                    selected={selectedIndex === 2}\r\n                    onClick={(event) => handleListItemClick(event, 2)}\r\n                >\r\n                    <ListItemText primary=\"Trash\" />\r\n                </ListItem>\r\n                <ListItem\r\n                    button\r\n                    selected={selectedIndex === 3}\r\n                    onClick={(event) => handleListItemClick(event, 3)}\r\n                >\r\n                    <ListItemText primary=\"Spam\" />\r\n                </ListItem>\r\n            </List>\r\n        </div>\r\n    );\r\n}","import React, {Component, useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport MapChart from \"./components/projects-maps.component\"\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport _ from \"lodash\";\r\n\r\nimport Filter from \"./components/filter.component\"\r\nimport App from \"../../App\";\r\n\r\n\r\nconst Project = props => (\r\n    <tr>\r\n        <td>{props.project.company}</td>\r\n        <td>{props.project.country}</td>\r\n        <td>{props.project.description}</td>\r\n        <td>{props.project.services}</td>\r\n\r\n    </tr>\r\n)\r\n\r\nexport  const ProjectsList =()=> {\r\n    const [content, setContent] = useState(\"\");\r\n    const [projects, setProjects] = useState([]);\r\n    const [service, setService] = useState(\"All\");\r\n\r\n\r\n    //   console.log(projects);\r\n\r\n     useEffect(()=>{\r\n         axios.get('http://localhost:8080/projects/')\r\n             .then(response => {\r\n                 setProjects( response.data )\r\n             })\r\n             .catch((error) => {\r\n                // console.log(error);\r\n             })\r\n     },[])\r\n\r\n\r\n\r\n    const projectList=()=> {\r\n        return projects.map(projectN => {\r\n            return <Project project={projectN} key={projectN._id}/>;\r\n        })\r\n    }\r\n\r\n  const getCountryData=(country)=>{\r\n\r\n    var data=  projects.filter((p)=>p.country==country)\r\n      if(service!=\"All\"){\r\n          data=data.filter((p)=>p.services==service)\r\n      }\r\n      return data;\r\n  }\r\n\r\n\r\n    const getServicesTo=()=>{\r\n        const servicesName = _.uniq(\r\n        _.map(projects, function(p) {\r\n\r\n            return p.services; }))\r\n\r\n        return [\"All\",...servicesName];\r\n    }\r\n\r\n    const getServices=()=>{\r\n\r\n       return(\r\n           <div>\r\n               <Dropdown >\r\n                   <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" >\r\n                       Services\r\n                   </Dropdown.Toggle>\r\n                   <Dropdown.Menu>\r\n                       {\r\n\r\n                           getServicesTo().map((value, index) => (\r\n                               <>\r\n                                   <Dropdown.Item key={index} onClick={()=>{setService(value)}}>{value}</Dropdown.Item>\r\n\r\n                               </>\r\n                           ))\r\n\r\n                       }\r\n                   </Dropdown.Menu>\r\n               </Dropdown>\r\n           </div>\r\n\r\n       )\r\n    }\r\n    const  services=getServices(content)\r\n    //console.log(getCountryData(\"France\"));\r\n     const project=getCountryData(content)\r\n        return (\r\n            <div>\r\n                {getServices()}\r\n            <div>\r\n\r\n            <div>\r\n                <MapChart setTooltipContent={setContent} />\r\n\r\n                <ReactTooltip>\r\n\r\n                    <div style={{display:'flex',flexDirection:'column',overflowY:'auto'}}>\r\n\r\n                        <div style={{marginBottom:20}}><h5 style={{color:'red'}}>{content}</h5></div>\r\n                        {project.map((value, index) => (\r\n                            <div key={index}>\r\n\r\n                                <div style={{marginBottom:  20}}><h5 style={{color:'green'}}>{value.company} - {value.services}</h5></div>\r\n                                <div style={{marginBottom: 20}}>{value.description}</div>\r\n                            </div>\r\n                        ))\r\n\r\n                        }\r\n                    </div>\r\n                </ReactTooltip>\r\n            </div>\r\n\r\n            </div>\r\n            </div>\r\n        );\r\n\r\n\r\n\r\n}\r\nexport default ProjectsList;\r\n","import React,{useState} from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\r\n\r\nimport Home from \"./pages/Home\"\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    const [content, setContent] = useState(\"\");\r\n    return (\r\n        <Router>\r\n            <Route path=\"/\" exact component={Home} />\r\n\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}